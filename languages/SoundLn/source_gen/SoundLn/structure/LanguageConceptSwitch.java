package SoundLn.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int Action = 0;
  public static final int Alert = 1;
  public static final int Area = 2;
  public static final int Condition = 3;
  public static final int Conditional = 4;
  public static final int DataLifeTime = 5;
  public static final int DataStoragePolicy = 6;
  public static final int Event = 7;
  public static final int Events = 8;
  public static final int GeneratesEvent = 9;
  public static final int Policies = 10;
  public static final int PoliciesKeyWord = 11;
  public static final int Position = 12;
  public static final int Reaction = 13;
  public static final int Recording = 14;
  public static final int Rule = 15;
  public static final int Sensibility = 16;
  public static final int Sensor = 17;
  public static final int Sensors = 18;
  public static final int SoundRecordingPolicy = 19;
  public static final int SoundRecordingSolution = 20;
  public static final int Storage = 21;
  public static final int Trigger = 22;
  public static final int Type = 23;
  public static final int Zone = 24;
  public static final int Zones = 25;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x1cb3be812ce745bcL, 0xb95047f9080cab09L);
    builder.put(0x247d975d2965675L, Action);
    builder.put(0x575aa0ff3bc7a525L, Alert);
    builder.put(0x575aa0ff3bc7993dL, Area);
    builder.put(0x575aa0ff3bc798bfL, Condition);
    builder.put(0x247d975d2965655L, Conditional);
    builder.put(0x575aa0ff3bc798edL, DataLifeTime);
    builder.put(0x575aa0ff3bc798d6L, DataStoragePolicy);
    builder.put(0x6d92a9097485f4c0L, Event);
    builder.put(0x575aa0ff3bc799c2L, Events);
    builder.put(0x575aa0ff3bc7998dL, GeneratesEvent);
    builder.put(0x575aa0ff3bc79946L, Policies);
    builder.put(0x575aa0ff3bc79945L, PoliciesKeyWord);
    builder.put(0x575aa0ff3bc79932L, Position);
    builder.put(0x575aa0ff3bc799c5L, Reaction);
    builder.put(0x575aa0ff3bc798c0L, Recording);
    builder.put(0x575aa0ff3bc798aeL, Rule);
    builder.put(0x575aa0ff3bc798cdL, Sensibility);
    builder.put(0x6d92a90974855a2bL, Sensor);
    builder.put(0x575aa0ff3bc7992fL, Sensors);
    builder.put(0x6d92a90974855a2aL, SoundRecordingPolicy);
    builder.put(0x575aa0ff3bc9076dL, SoundRecordingSolution);
    builder.put(0x575aa0ff3bc798ecL, Storage);
    builder.put(0x575aa0ff3bc7995aL, Trigger);
    builder.put(0x575aa0ff3bc798ebL, Type);
    builder.put(0x575aa0ff3bc79933L, Zone);
    builder.put(0x575aa0ff3bc7993eL, Zones);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
