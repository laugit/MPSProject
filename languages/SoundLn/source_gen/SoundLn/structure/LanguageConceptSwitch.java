package SoundLn.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int Action = 0;
  public static final int Alert = 1;
  public static final int AllowStorage = 2;
  public static final int AndBooleanExpression = 3;
  public static final int Area = 4;
  public static final int AverageSoundLevel = 5;
  public static final int BoolFromExpression = 6;
  public static final int BooleanExpression = 7;
  public static final int Condition = 8;
  public static final int Conditional = 9;
  public static final int CoordinateAreaDefinition = 10;
  public static final int DataLifeTime = 11;
  public static final int DataStoragePolicy = 12;
  public static final int DisableStorage = 13;
  public static final int Display = 14;
  public static final int Environment = 15;
  public static final int EqualBoolExpr = 16;
  public static final int Event = 17;
  public static final int Events = 18;
  public static final int False = 19;
  public static final int GPSCoordinate = 20;
  public static final int GeneratesEvent = 21;
  public static final int GreaterBoolExpr = 22;
  public static final int LowerBoolExpr = 23;
  public static final int Macro = 24;
  public static final int Macros = 25;
  public static final int OneLineConditional = 26;
  public static final int OrBooleanExpression = 27;
  public static final int Policies = 28;
  public static final int PoliciesKeyWord = 29;
  public static final int Position = 30;
  public static final int Radio = 31;
  public static final int Reaction = 32;
  public static final int Recording = 33;
  public static final int Rule = 34;
  public static final int Sensibility = 35;
  public static final int Sensor = 36;
  public static final int Sensors = 37;
  public static final int SensorsAreaDefinition = 38;
  public static final int SoundFrequency = 39;
  public static final int SoundLevel = 40;
  public static final int SoundMatches = 41;
  public static final int SoundRecordingPolicy = 42;
  public static final int SoundRecordingSolution = 43;
  public static final int SoundRepetition = 44;
  public static final int Storage = 45;
  public static final int Trigger = 46;
  public static final int TriggerWhen = 47;
  public static final int True = 48;
  public static final int Type = 49;
  public static final int Zone = 50;
  public static final int ZoneKeyWord = 51;
  public static final int Zones = 52;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x1cb3be812ce745bcL, 0xb95047f9080cab09L);
    builder.put(0x247d975d2965675L, Action);
    builder.put(0x575aa0ff3bc7a525L, Alert);
    builder.put(0x624ac4859305ee48L, AllowStorage);
    builder.put(0x624ac48593105a45L, AndBooleanExpression);
    builder.put(0x575aa0ff3bc7993dL, Area);
    builder.put(0x624ac485931133cdL, AverageSoundLevel);
    builder.put(0x624ac48593185016L, BoolFromExpression);
    builder.put(0x624ac48593105a44L, BooleanExpression);
    builder.put(0x575aa0ff3bc798bfL, Condition);
    builder.put(0x247d975d2965655L, Conditional);
    builder.put(0x624ac48592d9a10bL, CoordinateAreaDefinition);
    builder.put(0x575aa0ff3bc798edL, DataLifeTime);
    builder.put(0x575aa0ff3bc798d6L, DataStoragePolicy);
    builder.put(0x624ac4859305ee62L, DisableStorage);
    builder.put(0x624ac48592f74879L, Display);
    builder.put(0x624ac48593105b55L, Environment);
    builder.put(0x624ac48593105a69L, EqualBoolExpr);
    builder.put(0x6d92a9097485f4c0L, Event);
    builder.put(0x575aa0ff3bc799c2L, Events);
    builder.put(0x624ac48593189738L, False);
    builder.put(0x624ac48592d8b7aaL, GPSCoordinate);
    builder.put(0x575aa0ff3bc7998dL, GeneratesEvent);
    builder.put(0x624ac48593105a51L, GreaterBoolExpr);
    builder.put(0x624ac48593105a57L, LowerBoolExpr);
    builder.put(0x537d330de369fc7bL, Macro);
    builder.put(0x537d330de369fc76L, Macros);
    builder.put(0x624ac485930533b2L, OneLineConditional);
    builder.put(0x624ac48593105a4bL, OrBooleanExpression);
    builder.put(0x575aa0ff3bc79946L, Policies);
    builder.put(0x575aa0ff3bc79945L, PoliciesKeyWord);
    builder.put(0x575aa0ff3bc79932L, Position);
    builder.put(0x624ac48592f5f872L, Radio);
    builder.put(0x575aa0ff3bc799c5L, Reaction);
    builder.put(0x537d330de36c5924L, Recording);
    builder.put(0x575aa0ff3bc798aeL, Rule);
    builder.put(0x575aa0ff3bc798cdL, Sensibility);
    builder.put(0x6d92a90974855a2bL, Sensor);
    builder.put(0x575aa0ff3bc7992fL, Sensors);
    builder.put(0x624ac48592d9a03aL, SensorsAreaDefinition);
    builder.put(0x624ac48593123f80L, SoundFrequency);
    builder.put(0x624ac48593105b86L, SoundLevel);
    builder.put(0x624ac48593150e37L, SoundMatches);
    builder.put(0x6d92a90974855a2aL, SoundRecordingPolicy);
    builder.put(0x624ac48592d7e63dL, SoundRecordingSolution);
    builder.put(0x624ac4859313026cL, SoundRepetition);
    builder.put(0x575aa0ff3bc798ecL, Storage);
    builder.put(0x575aa0ff3bc7995aL, Trigger);
    builder.put(0x624ac48592eebb52L, TriggerWhen);
    builder.put(0x624ac4859318971eL, True);
    builder.put(0x575aa0ff3bc798ebL, Type);
    builder.put(0x575aa0ff3bc79933L, Zone);
    builder.put(0x624ac48592eb1071L, ZoneKeyWord);
    builder.put(0x575aa0ff3bc7993eL, Zones);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
