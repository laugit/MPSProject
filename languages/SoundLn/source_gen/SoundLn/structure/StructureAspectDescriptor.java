package SoundLn.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptCaptor = createDescriptorForCaptor();
  /*package*/ final ConceptDescriptor myConceptContinuousCaptor = createDescriptorForContinuousCaptor();
  /*package*/ final ConceptDescriptor myConceptEvent = createDescriptorForEvent();
  /*package*/ final ConceptDescriptor myConceptScheduledCaptor = createDescriptorForScheduledCaptor();
  /*package*/ final ConceptDescriptor myConceptSoundDetector = createDescriptorForSoundDetector();
  /*package*/ final ConceptDescriptor myConceptTime = createDescriptorForTime();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptCaptor, myConceptContinuousCaptor, myConceptEvent, myConceptScheduledCaptor, myConceptSoundDetector, myConceptTime);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.Captor:
        return myConceptCaptor;
      case LanguageConceptSwitch.ContinuousCaptor:
        return myConceptContinuousCaptor;
      case LanguageConceptSwitch.Event:
        return myConceptEvent;
      case LanguageConceptSwitch.ScheduledCaptor:
        return myConceptScheduledCaptor;
      case LanguageConceptSwitch.SoundDetector:
        return myConceptSoundDetector;
      case LanguageConceptSwitch.Time:
        return myConceptTime;
      default:
        return null;
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForCaptor() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoundLn", "Captor", 0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x6d92a90974855a2bL);
    b.class_(false, false, false);
    b.origin("r:b5550555-b3bc-4782-a6c7-5f089d01e8cd(SoundLn.structure)/7895558954808597035");
    b.version(2);
    b.prop("name", 0x6d92a90974855a2cL, "7895558954808597036");
    b.aggregate("events", 0x6d92a9097485f4c3L).target(0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x6d92a9097485f4c0L).optional(true).ordered(true).multiple(true).origin("7895558954808636611").done();
    b.alias("captor");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForContinuousCaptor() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoundLn", "ContinuousCaptor", 0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x6d92a90974855a38L);
    b.class_(false, false, false);
    b.super_("SoundLn.structure.Captor", 0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x6d92a90974855a2bL);
    b.origin("r:b5550555-b3bc-4782-a6c7-5f089d01e8cd(SoundLn.structure)/7895558954808597048");
    b.version(2);
    b.alias("continuous captor");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEvent() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoundLn", "Event", 0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x6d92a9097485f4c0L);
    b.class_(false, false, false);
    b.origin("r:b5550555-b3bc-4782-a6c7-5f089d01e8cd(SoundLn.structure)/7895558954808636608");
    b.version(2);
    b.prop("name", 0x6d92a9097485f4c1L, "7895558954808636609");
    b.alias("event");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForScheduledCaptor() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoundLn", "ScheduledCaptor", 0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x6d92a90974855a30L);
    b.class_(false, false, false);
    b.super_("SoundLn.structure.Captor", 0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x6d92a90974855a2bL);
    b.origin("r:b5550555-b3bc-4782-a6c7-5f089d01e8cd(SoundLn.structure)/7895558954808597040");
    b.version(2);
    b.aggregate("times", 0x6d92a9097486b185L).target(0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x6d92a9097486b17bL).optional(true).ordered(true).multiple(true).origin("7895558954808684933").done();
    b.alias("scheduled captor");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSoundDetector() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoundLn", "SoundDetector", 0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x6d92a90974855a2aL);
    b.class_(false, false, true);
    b.origin("r:b5550555-b3bc-4782-a6c7-5f089d01e8cd(SoundLn.structure)/7895558954808597034");
    b.version(2);
    b.prop("name", 0x6d92a90974855a2eL, "7895558954808597038");
    b.aggregate("scheduledcaptors", 0x6d92a90974855a31L).target(0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x6d92a90974855a30L).optional(true).ordered(true).multiple(true).origin("7895558954808597041").done();
    b.aggregate("continuouscaptors", 0x6d92a90974855a35L).target(0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x6d92a90974855a38L).optional(true).ordered(true).multiple(true).origin("7895558954808597045").done();
    b.alias("sound detector");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTime() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SoundLn", "Time", 0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x6d92a9097486b17bL);
    b.class_(false, false, false);
    b.origin("r:b5550555-b3bc-4782-a6c7-5f089d01e8cd(SoundLn.structure)/7895558954808684923");
    b.version(2);
    b.prop("hour", 0x6d92a9097486b17cL, "7895558954808684924");
    b.prop("min", 0x6d92a9097486b17eL, "7895558954808684926");
    b.prop("sec", 0x6d92a9097486b181L, "7895558954808684929");
    b.alias("at time");
    return b.create();
  }
}
