package SoundLn.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Captor;
  private ConceptPresentation props_ContinuousCaptor;
  private ConceptPresentation props_Event;
  private ConceptPresentation props_ScheduledCaptor;
  private ConceptPresentation props_SoundDetector;
  private ConceptPresentation props_Time;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Captor:
        if (props_Captor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("captor");
          props_Captor = cpb.create();
        }
        return props_Captor;
      case LanguageConceptSwitch.ContinuousCaptor:
        if (props_ContinuousCaptor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("continuous captor");
          props_ContinuousCaptor = cpb.create();
        }
        return props_ContinuousCaptor;
      case LanguageConceptSwitch.Event:
        if (props_Event == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("event");
          props_Event = cpb.create();
        }
        return props_Event;
      case LanguageConceptSwitch.ScheduledCaptor:
        if (props_ScheduledCaptor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("scheduled captor");
          props_ScheduledCaptor = cpb.create();
        }
        return props_ScheduledCaptor;
      case LanguageConceptSwitch.SoundDetector:
        if (props_SoundDetector == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("sound detector");
          props_SoundDetector = cpb.create();
        }
        return props_SoundDetector;
      case LanguageConceptSwitch.Time:
        if (props_Time == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("at time");
          props_Time = cpb.create();
        }
        return props_Time;
    }
    return null;
  }
}
