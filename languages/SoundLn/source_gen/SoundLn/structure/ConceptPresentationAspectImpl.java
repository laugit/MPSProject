package SoundLn.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Action;
  private ConceptPresentation props_Alert;
  private ConceptPresentation props_AllowStorage;
  private ConceptPresentation props_AndBooleanExpression;
  private ConceptPresentation props_Area;
  private ConceptPresentation props_AverageSoundLevel;
  private ConceptPresentation props_BoolFromExpression;
  private ConceptPresentation props_BooleanExpression;
  private ConceptPresentation props_Condition;
  private ConceptPresentation props_Conditional;
  private ConceptPresentation props_CoordinateAreaDefinition;
  private ConceptPresentation props_DataLifeTime;
  private ConceptPresentation props_DataStoragePolicy;
  private ConceptPresentation props_DisableStorage;
  private ConceptPresentation props_Display;
  private ConceptPresentation props_Environment;
  private ConceptPresentation props_EqualBoolExpr;
  private ConceptPresentation props_Event;
  private ConceptPresentation props_Events;
  private ConceptPresentation props_Expression;
  private ConceptPresentation props_Expressions;
  private ConceptPresentation props_False;
  private ConceptPresentation props_GPSCoordinate;
  private ConceptPresentation props_GeneratesEvent;
  private ConceptPresentation props_GreaterBoolExpr;
  private ConceptPresentation props_LowerBoolExpr;
  private ConceptPresentation props_OneLineConditional;
  private ConceptPresentation props_OrBooleanExpression;
  private ConceptPresentation props_Policies;
  private ConceptPresentation props_PoliciesKeyWord;
  private ConceptPresentation props_Position;
  private ConceptPresentation props_Radio;
  private ConceptPresentation props_Reaction;
  private ConceptPresentation props_Recording;
  private ConceptPresentation props_Rule;
  private ConceptPresentation props_Sensibility;
  private ConceptPresentation props_Sensor;
  private ConceptPresentation props_Sensors;
  private ConceptPresentation props_SensorsAreaDefinition;
  private ConceptPresentation props_SoundFrequency;
  private ConceptPresentation props_SoundLevel;
  private ConceptPresentation props_SoundMatches;
  private ConceptPresentation props_SoundRecordingPolicy;
  private ConceptPresentation props_SoundRecordingSolution;
  private ConceptPresentation props_SoundRepetition;
  private ConceptPresentation props_Storage;
  private ConceptPresentation props_Trigger;
  private ConceptPresentation props_TriggerWhen;
  private ConceptPresentation props_True;
  private ConceptPresentation props_Type;
  private ConceptPresentation props_Zone;
  private ConceptPresentation props_ZoneKeyWord;
  private ConceptPresentation props_Zones;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Action:
        if (props_Action == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("do");
          props_Action = cpb.create();
        }
        return props_Action;
      case LanguageConceptSwitch.Alert:
        if (props_Alert == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("alert");
          props_Alert = cpb.create();
        }
        return props_Alert;
      case LanguageConceptSwitch.AllowStorage:
        if (props_AllowStorage == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("allow");
          props_AllowStorage = cpb.create();
        }
        return props_AllowStorage;
      case LanguageConceptSwitch.AndBooleanExpression:
        if (props_AndBooleanExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("andbool");
          props_AndBooleanExpression = cpb.create();
        }
        return props_AndBooleanExpression;
      case LanguageConceptSwitch.Area:
        if (props_Area == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("area");
          props_Area = cpb.create();
        }
        return props_Area;
      case LanguageConceptSwitch.AverageSoundLevel:
        if (props_AverageSoundLevel == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("averageSoundLevel");
          props_AverageSoundLevel = cpb.create();
        }
        return props_AverageSoundLevel;
      case LanguageConceptSwitch.BoolFromExpression:
        if (props_BoolFromExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("expr");
          props_BoolFromExpression = cpb.create();
        }
        return props_BoolFromExpression;
      case LanguageConceptSwitch.BooleanExpression:
        if (props_BooleanExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("bool");
          props_BooleanExpression = cpb.create();
        }
        return props_BooleanExpression;
      case LanguageConceptSwitch.Condition:
        if (props_Condition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("condition");
          props_Condition = cpb.create();
        }
        return props_Condition;
      case LanguageConceptSwitch.Conditional:
        if (props_Conditional == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("if");
          props_Conditional = cpb.create();
        }
        return props_Conditional;
      case LanguageConceptSwitch.CoordinateAreaDefinition:
        if (props_CoordinateAreaDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("cad");
          props_CoordinateAreaDefinition = cpb.create();
        }
        return props_CoordinateAreaDefinition;
      case LanguageConceptSwitch.DataLifeTime:
        if (props_DataLifeTime == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("dataLifeTime");
          props_DataLifeTime = cpb.create();
        }
        return props_DataLifeTime;
      case LanguageConceptSwitch.DataStoragePolicy:
        if (props_DataStoragePolicy == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("dataStoragePolicy");
          props_DataStoragePolicy = cpb.create();
        }
        return props_DataStoragePolicy;
      case LanguageConceptSwitch.DisableStorage:
        if (props_DisableStorage == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("disable");
          props_DisableStorage = cpb.create();
        }
        return props_DisableStorage;
      case LanguageConceptSwitch.Display:
        if (props_Display == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("display");
          props_Display = cpb.create();
        }
        return props_Display;
      case LanguageConceptSwitch.Environment:
        if (props_Environment == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("environment");
          props_Environment = cpb.create();
        }
        return props_Environment;
      case LanguageConceptSwitch.EqualBoolExpr:
        if (props_EqualBoolExpr == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("equal");
          props_EqualBoolExpr = cpb.create();
        }
        return props_EqualBoolExpr;
      case LanguageConceptSwitch.Event:
        if (props_Event == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("event");
          props_Event = cpb.create();
        }
        return props_Event;
      case LanguageConceptSwitch.Events:
        if (props_Events == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("events");
          props_Events = cpb.create();
        }
        return props_Events;
      case LanguageConceptSwitch.Expression:
        if (props_Expression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("expression");
          props_Expression = cpb.create();
        }
        return props_Expression;
      case LanguageConceptSwitch.Expressions:
        if (props_Expressions == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("expressions");
          props_Expressions = cpb.create();
        }
        return props_Expressions;
      case LanguageConceptSwitch.False:
        if (props_False == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("false");
          props_False = cpb.create();
        }
        return props_False;
      case LanguageConceptSwitch.GPSCoordinate:
        if (props_GPSCoordinate == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("gps");
          props_GPSCoordinate = cpb.create();
        }
        return props_GPSCoordinate;
      case LanguageConceptSwitch.GeneratesEvent:
        if (props_GeneratesEvent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("generates event");
          props_GeneratesEvent = cpb.create();
        }
        return props_GeneratesEvent;
      case LanguageConceptSwitch.GreaterBoolExpr:
        if (props_GreaterBoolExpr == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("greater");
          props_GreaterBoolExpr = cpb.create();
        }
        return props_GreaterBoolExpr;
      case LanguageConceptSwitch.LowerBoolExpr:
        if (props_LowerBoolExpr == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("lower");
          props_LowerBoolExpr = cpb.create();
        }
        return props_LowerBoolExpr;
      case LanguageConceptSwitch.OneLineConditional:
        if (props_OneLineConditional == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("if");
          props_OneLineConditional = cpb.create();
        }
        return props_OneLineConditional;
      case LanguageConceptSwitch.OrBooleanExpression:
        if (props_OrBooleanExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("orbool");
          props_OrBooleanExpression = cpb.create();
        }
        return props_OrBooleanExpression;
      case LanguageConceptSwitch.Policies:
        if (props_Policies == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("policies");
          props_Policies = cpb.create();
        }
        return props_Policies;
      case LanguageConceptSwitch.PoliciesKeyWord:
        if (props_PoliciesKeyWord == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("policies");
          props_PoliciesKeyWord = cpb.create();
        }
        return props_PoliciesKeyWord;
      case LanguageConceptSwitch.Position:
        if (props_Position == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("position");
          props_Position = cpb.create();
        }
        return props_Position;
      case LanguageConceptSwitch.Radio:
        if (props_Radio == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("radio");
          props_Radio = cpb.create();
        }
        return props_Radio;
      case LanguageConceptSwitch.Reaction:
        if (props_Reaction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("reaction");
          props_Reaction = cpb.create();
        }
        return props_Reaction;
      case LanguageConceptSwitch.Recording:
        if (props_Recording == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("recording");
          props_Recording = cpb.create();
        }
        return props_Recording;
      case LanguageConceptSwitch.Rule:
        if (props_Rule == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("rule");
          props_Rule = cpb.create();
        }
        return props_Rule;
      case LanguageConceptSwitch.Sensibility:
        if (props_Sensibility == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("sensibility");
          props_Sensibility = cpb.create();
        }
        return props_Sensibility;
      case LanguageConceptSwitch.Sensor:
        if (props_Sensor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("sensor");
          props_Sensor = cpb.create();
        }
        return props_Sensor;
      case LanguageConceptSwitch.Sensors:
        if (props_Sensors == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("sensors");
          props_Sensors = cpb.create();
        }
        return props_Sensors;
      case LanguageConceptSwitch.SensorsAreaDefinition:
        if (props_SensorsAreaDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("sad");
          props_SensorsAreaDefinition = cpb.create();
        }
        return props_SensorsAreaDefinition;
      case LanguageConceptSwitch.SoundFrequency:
        if (props_SoundFrequency == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("SoundFrequency");
          props_SoundFrequency = cpb.create();
        }
        return props_SoundFrequency;
      case LanguageConceptSwitch.SoundLevel:
        if (props_SoundLevel == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("soundLevel");
          props_SoundLevel = cpb.create();
        }
        return props_SoundLevel;
      case LanguageConceptSwitch.SoundMatches:
        if (props_SoundMatches == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("sound matches");
          props_SoundMatches = cpb.create();
        }
        return props_SoundMatches;
      case LanguageConceptSwitch.SoundRecordingPolicy:
        if (props_SoundRecordingPolicy == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("soundRecordingPolicy");
          props_SoundRecordingPolicy = cpb.create();
        }
        return props_SoundRecordingPolicy;
      case LanguageConceptSwitch.SoundRecordingSolution:
        if (props_SoundRecordingSolution == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("soundRecordingSolution");
          props_SoundRecordingSolution = cpb.create();
        }
        return props_SoundRecordingSolution;
      case LanguageConceptSwitch.SoundRepetition:
        if (props_SoundRepetition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("SoundRepetition");
          props_SoundRepetition = cpb.create();
        }
        return props_SoundRepetition;
      case LanguageConceptSwitch.Storage:
        if (props_Storage == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("storage");
          props_Storage = cpb.create();
        }
        return props_Storage;
      case LanguageConceptSwitch.Trigger:
        if (props_Trigger == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("trigger");
          props_Trigger = cpb.create();
        }
        return props_Trigger;
      case LanguageConceptSwitch.TriggerWhen:
        if (props_TriggerWhen == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("when");
          props_TriggerWhen = cpb.create();
        }
        return props_TriggerWhen;
      case LanguageConceptSwitch.True:
        if (props_True == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("true");
          props_True = cpb.create();
        }
        return props_True;
      case LanguageConceptSwitch.Type:
        if (props_Type == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("type");
          props_Type = cpb.create();
        }
        return props_Type;
      case LanguageConceptSwitch.Zone:
        if (props_Zone == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("zone");
          props_Zone = cpb.create();
        }
        return props_Zone;
      case LanguageConceptSwitch.ZoneKeyWord:
        if (props_ZoneKeyWord == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("zone");
          props_ZoneKeyWord = cpb.create();
        }
        return props_ZoneKeyWord;
      case LanguageConceptSwitch.Zones:
        if (props_Zones == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("zones");
          props_Zones = cpb.create();
        }
        return props_Zones;
    }
    return null;
  }
}
