package SoundLn.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Action;
  private ConceptPresentation props_BooleanExpr;
  private ConceptPresentation props_Conditional;
  private ConceptPresentation props_ContinuousSensor;
  private ConceptPresentation props_DesactivateAlarm;
  private ConceptPresentation props_Event;
  private ConceptPresentation props_LegalLevelCondition;
  private ConceptPresentation props_LegalLevelSetter;
  private ConceptPresentation props_RingAlarm;
  private ConceptPresentation props_ScheduledSensor;
  private ConceptPresentation props_Sensor;
  private ConceptPresentation props_SoundDetector;
  private ConceptPresentation props_SubTime;
  private ConceptPresentation props_Time;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Action:
        if (props_Action == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("do");
          props_Action = cpb.create();
        }
        return props_Action;
      case LanguageConceptSwitch.BooleanExpr:
        if (props_BooleanExpr == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("bool");
          props_BooleanExpr = cpb.create();
        }
        return props_BooleanExpr;
      case LanguageConceptSwitch.Conditional:
        if (props_Conditional == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("if");
          props_Conditional = cpb.create();
        }
        return props_Conditional;
      case LanguageConceptSwitch.ContinuousSensor:
        if (props_ContinuousSensor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("continuous sensor");
          props_ContinuousSensor = cpb.create();
        }
        return props_ContinuousSensor;
      case LanguageConceptSwitch.DesactivateAlarm:
        if (props_DesactivateAlarm == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("desactivate alarm");
          props_DesactivateAlarm = cpb.create();
        }
        return props_DesactivateAlarm;
      case LanguageConceptSwitch.Event:
        if (props_Event == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("event");
          props_Event = cpb.create();
        }
        return props_Event;
      case LanguageConceptSwitch.LegalLevelCondition:
        if (props_LegalLevelCondition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("has legal level");
          props_LegalLevelCondition = cpb.create();
        }
        return props_LegalLevelCondition;
      case LanguageConceptSwitch.LegalLevelSetter:
        if (props_LegalLevelSetter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("set legal level");
          props_LegalLevelSetter = cpb.create();
        }
        return props_LegalLevelSetter;
      case LanguageConceptSwitch.RingAlarm:
        if (props_RingAlarm == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ring alarm");
          props_RingAlarm = cpb.create();
        }
        return props_RingAlarm;
      case LanguageConceptSwitch.ScheduledSensor:
        if (props_ScheduledSensor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("scheduled sensor");
          props_ScheduledSensor = cpb.create();
        }
        return props_ScheduledSensor;
      case LanguageConceptSwitch.Sensor:
        if (props_Sensor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("sensor");
          props_Sensor = cpb.create();
        }
        return props_Sensor;
      case LanguageConceptSwitch.SoundDetector:
        if (props_SoundDetector == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("sound detector");
          props_SoundDetector = cpb.create();
        }
        return props_SoundDetector;
      case LanguageConceptSwitch.SubTime:
        if (props_SubTime == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("sub time");
          props_SubTime = cpb.create();
        }
        return props_SubTime;
      case LanguageConceptSwitch.Time:
        if (props_Time == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("at time");
          props_Time = cpb.create();
        }
        return props_Time;
    }
    return null;
  }
}
