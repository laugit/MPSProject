package SoundLn.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.TransformationMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new Action_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new Area_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new Condition_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new Conditional_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new CoordinateAreaDefinition_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new DataLifeTime_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new DataStoragePolicy_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new Expression_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new Expressions_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new GPSCoordinate_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new GeneratesEvent_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new Policies_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new PoliciesKeyWord_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new Position_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new Recording_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new Rule_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new Sensibility_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new Sensor_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new Sensors_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new SensorsAreaDefinition_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new SoundRecordingPolicy_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new SoundRecordingSolution_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new Storage_Editor());
      case 23:
        return Collections.<ConceptEditor>singletonList(new Trigger_Editor());
      case 24:
        return Collections.<ConceptEditor>singletonList(new TriggerWhen_Editor());
      case 25:
        return Collections.<ConceptEditor>singletonList(new Type_Editor());
      case 26:
        return Collections.<ConceptEditor>singletonList(new Zone_Editor());
      case 27:
        return Collections.<ConceptEditor>singletonList(new ZoneKeyWord_Editor());
      case 28:
        return Collections.<ConceptEditor>singletonList(new Zones_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }


  @NotNull
  @Override
  public Collection<TransformationMenu> getDeclaredDefaultTransformationMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return Collections.<TransformationMenu>singletonList(new Area_TransformationMenu());
      case 1:
        return Collections.<TransformationMenu>singletonList(new Conditional_TransformationMenu());
      default:
    }
    return Collections.<TransformationMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x247d975d2965675L), MetaIdFactory.conceptId(0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x575aa0ff3bc7993dL), MetaIdFactory.conceptId(0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x575aa0ff3bc798bfL), MetaIdFactory.conceptId(0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x247d975d2965655L), MetaIdFactory.conceptId(0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x624ac48592d9a10bL), MetaIdFactory.conceptId(0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x575aa0ff3bc798edL), MetaIdFactory.conceptId(0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x575aa0ff3bc798d6L), MetaIdFactory.conceptId(0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x537d330de369fc7bL), MetaIdFactory.conceptId(0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x537d330de369fc76L), MetaIdFactory.conceptId(0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x624ac48592d8b7aaL), MetaIdFactory.conceptId(0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x575aa0ff3bc7998dL), MetaIdFactory.conceptId(0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x575aa0ff3bc79946L), MetaIdFactory.conceptId(0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x575aa0ff3bc79945L), MetaIdFactory.conceptId(0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x575aa0ff3bc79932L), MetaIdFactory.conceptId(0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x537d330de36c5924L), MetaIdFactory.conceptId(0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x575aa0ff3bc798aeL), MetaIdFactory.conceptId(0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x575aa0ff3bc798cdL), MetaIdFactory.conceptId(0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x6d92a90974855a2bL), MetaIdFactory.conceptId(0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x575aa0ff3bc7992fL), MetaIdFactory.conceptId(0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x624ac48592d9a03aL), MetaIdFactory.conceptId(0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x6d92a90974855a2aL), MetaIdFactory.conceptId(0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x624ac48592d7e63dL), MetaIdFactory.conceptId(0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x575aa0ff3bc798ecL), MetaIdFactory.conceptId(0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x575aa0ff3bc7995aL), MetaIdFactory.conceptId(0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x624ac48592eebb52L), MetaIdFactory.conceptId(0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x575aa0ff3bc798ebL), MetaIdFactory.conceptId(0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x575aa0ff3bc79933L), MetaIdFactory.conceptId(0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x624ac48592eb1071L), MetaIdFactory.conceptId(0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x575aa0ff3bc7993eL)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x575aa0ff3bc7993dL), MetaIdFactory.conceptId(0x1cb3be812ce745bcL, 0xb95047f9080cab09L, 0x247d975d2965655L)).seal();
}
